================================================================
Repopack Output File
================================================================

This file was generated by Repopack on: 2024-10-01T14:09:21.344Z

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Repository structure
3. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
  distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.



For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
src/
  extension.ts
package.json
package.nls.json

================================================================
Repository Files
================================================================

================
File: src/extension.ts
================
import * as vscode from 'vscode';

interface Snippet {
    name: string;
    snippet: string;
}

function log(message: string) {
    console.log(`[Clibbits] ${message}`);
}

export function activate(context: vscode.ExtensionContext) {
    log('Clibbits extension is now active!');

    let disposable = vscode.commands.registerCommand('clibbits.copySnippet', async () => {
        try {
            const editor = vscode.window.activeTextEditor;
            if (!editor) {
                vscode.window.showErrorMessage('No active editor!');
                return;
            }

            const language = editor.document.languageId;
            log(`Current language: ${language}`);

            const config = vscode.workspace.getConfiguration('clibbits');
            const snippets: { [key: string]: Snippet[] } = config.get('snippets') || {};

            // Get snippets for the current language and 'general' snippets
            const currentLanguageSnippets = snippets[language] || [];
            const generalSnippets = snippets['general'] || [];
            const availableSnippets = [...currentLanguageSnippets, ...generalSnippets];

            if (availableSnippets.length === 0) {
                vscode.window.showInformationMessage(`No snippets available for ${language}. Add some in the extension settings!`);
                return;
            }

            const snippetOptions = availableSnippets.map(s => s.name);
            const selected = await vscode.window.showQuickPick(snippetOptions, {
                placeHolder: `Select a snippet for ${language} to copy`
            });

            if (selected) {
                const snippet = availableSnippets.find(s => s.name === selected);
                if (snippet) {
                    await vscode.env.clipboard.writeText(snippet.snippet);
                    vscode.window.showInformationMessage(`Copied "${selected}" snippet to clipboard.`);
                    log(`Snippet "${selected}" copied to clipboard.`);
                }
            }
        } catch (error) {
            log(`Error in copySnippet command: ${error}`);
            vscode.window.showErrorMessage(`Error copying snippet: ${error}`);
        }
    });

    context.subscriptions.push(disposable);

    log('Clibbits extension activation completed.');
}

export function deactivate() {
    log('Clibbits extension is being deactivated.');
}

================
File: package.json
================
{
  "name": "clibbits",
  "displayName": "Clibbits",
  "description": "Right-click to copy customizable snippets to clipboard based on file type",
  "version": "0.0.4",
  "engines": {
    "vscode": "^1.60.0"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "onStartupFinished"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "configuration": {
      "title": "Clibbits",
      "properties": {
        "clibbits.snippets": {
          "type": "object",
          "default": {
            "general": [
              {
                "name": "Current Date",
                "snippet": "${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}"
              }
            ],
            "javascript": [
              {
                "name": "Console log",
                "snippet": "console.log();"
              }
            ],
            "html": [
              {
                "name": "HTML5 boilerplate",
                "snippet": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t<title>Document</title>\n</head>\n<body>\n\n</body>\n</html>"
              }
            ],
            "python": [
              {
                "name": "Print statement",
                "snippet": "print()"
              }
            ]
          },
          "description": "Customize snippets for different languages. Use 'general' for snippets available in all files."
        }
      }
    },
    "commands": [
      {
        "command": "clibbits.copySnippet",
        "title": "Clibbits Copy Snippet"
      }
    ],
    "menus": {
      "editor/context": [
        {
          "command": "clibbits.copySnippet",
          "group": "navigation"
        }
      ]
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src --ext ts",
    "test": "node ./out/test/runTest.js"
  },
  "devDependencies": {
    "@types/vscode": "^1.60.0",
    "@types/node": "14.x",
    "@typescript-eslint/eslint-plugin": "^5.1.0",
    "@typescript-eslint/parser": "^5.1.0",
    "eslint": "^8.1.0",
    "typescript": "^4.4.4"
  }
}

================
File: package.nls.json
================
{
    "clibbits.snippetMenu": "Clibbits Snippets",
    "clibbits.copySnippet": "Copy: {0}"
  }
