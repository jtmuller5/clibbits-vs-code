================================================================
Repopack Output File
================================================================

This file was generated by Repopack on: 2024-10-25T23:54:38.266Z

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Repository structure
3. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
  distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.



For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
src/
  commands/
    copyAllFiles.ts
    copyFile.ts
    index.ts
  extension.ts
package.json
package.nls.json

================================================================
Repository Files
================================================================

================
File: src/commands/copyAllFiles.ts
================
import * as vscode from 'vscode';
import * as path from 'path';

export class CopyAllFilesCommand {
    public static readonly commandName = 'clibbits.copyAllFiles';

    public static register(context: vscode.ExtensionContext): vscode.Disposable {
        return vscode.commands.registerCommand(this.commandName, async () => {
            const openEditors = vscode.window.tabGroups.all
                .flatMap(group => group.tabs)
                .filter(tab => tab.input instanceof vscode.TabInputText)
                .map(tab => (tab.input as vscode.TabInputText).uri);

            if (openEditors.length === 0) {
                vscode.window.showInformationMessage('No files are currently open.');
                return;
            }

            try {
                let combinedContent = '';

                for (const uri of openEditors) {
                    const document = await vscode.workspace.openTextDocument(uri);
                    const fileName = path.basename(document.fileName);
                    
                    combinedContent += `\n=== ${fileName} ===\n\n`;
                    combinedContent += document.getText();
                    combinedContent += '\n\n';
                }

                await vscode.env.clipboard.writeText(combinedContent);
                
                vscode.window.showInformationMessage(
                    `Successfully copied content from ${openEditors.length} file(s) to clipboard.`
                );
            } catch (error) {
                vscode.window.showErrorMessage(
                    `Failed to copy files: ${error instanceof Error ? error.message : 'Unknown error'}`
                );
            }
        });
    }
}

================
File: src/commands/copyFile.ts
================
import * as vscode from 'vscode';
import * as path from 'path';

export class CopyFileCommand {
    public static readonly commandName = 'clibbits.copyFile';

    public static register(context: vscode.ExtensionContext): vscode.Disposable {
        return vscode.commands.registerCommand(
            this.commandName,
            async (uri: vscode.Uri, selectedFiles: vscode.Uri[]) => {
                try {
                    let urisToProcess: vscode.Uri[] = [];

                    // Check if this is a multi-selection context menu action
                    if (selectedFiles && Array.isArray(selectedFiles)) {
                        urisToProcess = selectedFiles;
                    } 
                    // Single file from explorer context menu
                    else if (uri) {
                        urisToProcess = [uri];
                    }
                    // Called from command palette - use active editor
                    else if (vscode.window.activeTextEditor) {
                        urisToProcess = [vscode.window.activeTextEditor.document.uri];
                    }

                    if (urisToProcess.length === 0) {
                        vscode.window.showInformationMessage('No files selected.');
                        return;
                    }

                    let combinedContent = '';
                    let successfulCopies = 0;
                    let totalSize = 0;

                    for (const fileUri of urisToProcess) {
                        try {
                            const document = await vscode.workspace.openTextDocument(fileUri);
                            const content = document.getText();
                            const fileName = path.basename(fileUri.fsPath);
                            
                            // Add file separator if this isn't the first file
                            if (successfulCopies > 0) {
                                combinedContent += '\n\n';
                            }

                            // Only add headers if there are multiple files
                            if (urisToProcess.length > 1) {
                                combinedContent += `=== ${fileName} ===\n\n`;
                            }
                            
                            combinedContent += content;
                            successfulCopies++;
                            totalSize += content.length;

                            // Check if we're exceeding a reasonable size limit (e.g., 5MB)
                            if (totalSize > 5 * 1024 * 1024) {
                                throw new Error('Combined file size exceeds 5MB limit');
                            }
                        } catch (error) {
                            vscode.window.showWarningMessage(
                                `Failed to copy ${path.basename(fileUri.fsPath)}: ${error instanceof Error ? error.message : 'Unknown error'}`
                            );
                        }
                    }

                    if (successfulCopies > 0) {
                        await vscode.env.clipboard.writeText(combinedContent);
                        
                        const message = successfulCopies === 1
                            ? `Successfully copied contents of ${path.basename(urisToProcess[0].fsPath)} to clipboard.`
                            : `Successfully copied contents of ${successfulCopies} files to clipboard.`;
                        
                        vscode.window.showInformationMessage(message);
                    }
                } catch (error) {
                    vscode.window.showErrorMessage(
                        `Failed to copy files: ${error instanceof Error ? error.message : 'Unknown error'}`
                    );
                }
            }
        );
    }
}

================
File: src/commands/index.ts
================
export * from './copyAllFiles';
export * from './copyFile';

================
File: src/extension.ts
================
import * as vscode from "vscode";
import { CopyAllFilesCommand, CopyFileCommand } from "./commands";

export function activate(context: vscode.ExtensionContext) {
  console.log("Activating Clibbits extension");

  context.subscriptions.push(
    CopyAllFilesCommand.register(context),
    CopyFileCommand.register(context)
  );
}

export function deactivate() {}

================
File: package.json
================
{
  "name": "clibbits",
  "displayName": "Clibbits",
  "description": "Copy contents of files to clipboard",
  "version": "0.5.0",
  "publisher": "CodeontheRocks",
  "icon": "clibbits.png",
  "repository": {
    "type": "git",
    "url": "https://github.com/jtmuller5/clibbits"
  },
  "engines": {
    "vscode": "^1.60.0"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "onCommand:clibbits.copyAllFiles",
    "onCommand:clibbits.copyFile"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "clibbits.copyAllFiles",
        "title": "Clibbits: Copy All Open Files to Clipboard",
        "icon": "$(copy)"
      },
      {
        "command": "clibbits.copyFile",
        "title": "Clibbits: Copy File Contents to Clipboard",
        "icon": "$(copy)"
      }
    ],
    "menus": {
      "explorer/context": [
        {
          "command": "clibbits.copyFile",
          "group": "7_modification",
          "when": "explorerViewletVisible"
        }
      ],
      "editor/context": [
        {
          "command": "clibbits.copyFile",
          "group": "1_modification",
          "when": "resourceScheme == file"
        }
      ]
    },
    "keybindings": [
      {
        "command": "clibbits.copyAllFiles",
        "key": "ctrl+shift+c",
        "mac": "cmd+shift+c",
        "when": "editorTextFocus"
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src --ext ts",
    "test": "node ./out/test/runTest.js"
  },
  "devDependencies": {
    "@types/vscode": "^1.60.0",
    "@types/node": "14.x",
    "@typescript-eslint/eslint-plugin": "^5.1.0",
    "@typescript-eslint/parser": "^5.1.0",
    "eslint": "^8.1.0",
    "typescript": "^4.4.4"
  }
}

================
File: package.nls.json
================
{
    "clibbits.snippetMenu": "Clibbits Snippets",
    "clibbits.copySnippet": "Copy: {0}"
  }
